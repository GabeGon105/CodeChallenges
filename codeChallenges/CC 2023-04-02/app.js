// To pass the series of gates guarded by the owls, Kenneth needs to present them each with a highly realistic portrait of one. Unfortunately, he is absolutely rubbish at drawing, and needs some code to return a brand new portrait with a moment's notice.

// All owl heads look like this:

// ''0v0''
// Such beautiful eyes! However, they differ in their plumage, which is always symmetrical, eg.:

//    VVHVAV''0v0''VAVHVV
// or

// YYAYAH8XH''0v0''HX8HAYAYY
// So Kenneth needs a method that will take a garble of text generated by mashing at his keyboard (numbers and letters, but he knows how to avoid punctuation etc.) for a bit and give him a symmetrical owl with a lovely little face, with a truly symmetrical plumage made of uppercase letters and numbers.

// (To be clear, the acceptable characters for the plumage are 8,W,T,Y,U,I,O,A,H,X,V and M.)



// Parameters: a string of letters and numbers

// Return: the argument string filtered for only (8,W,T,Y,U,I,O,A,H,X,V and M), plus "''0v0''" plus the filtered argument reversed

// Examples:
owlPic("kuawd6r8q27y87t93r76352475437") // "UAW8Y8T''0v0''T8Y8WAU"
owlPic("t6ggggggggWw") // "TWW''0v0''WWT"



const owlPic = (string) => {
    // create a dictionary array to hold acceptable values
    const dictionary = [ '8' ,'W', 'T', 'Y', 'U', 'I', 'O', 'A', 'H', 'X', 'V', 'M' ]

    // split argument string to an array by '', map through the array to convert to upperCase and check if it is included in variable dictionary, join to a string, then save to a variable
    const acceptedValues = string.split('').map( (el) => {
        return ( dictionary.includes(el) || dictionary.includes(el.toUpperCase()) ) ? el.toUpperCase() : '';
    })
    .join('')

    // return acceptedValues plus "' '0v0' '" plus acceptedValues reversed
    return `${acceptedValues}''0v0''${acceptedValues.split('').reverse().join('')}`;
}